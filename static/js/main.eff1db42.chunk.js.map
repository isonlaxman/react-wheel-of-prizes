{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["segments","segColors","winningSegment","onFinished","_ref$primaryColor","primaryColor","_ref$contrastColor","contrastColor","_ref$buttonText","buttonText","_ref$isOnlyOnce","isOnlyOnce","_ref$size","size","_ref$upDuration","upDuration","_ref$downDuration","downDuration","_ref$fontFamily","fontFamily","currentSegment","isStarted","useState","isFinished","setFinished","timerHandle","timerDelay","length","angleCurrent","angleDelta","canvasContext","maxSpeed","Math","PI","upTime","downTime","spinStart","frames","useEffect","wheelInit","setTimeout","window","scrollTo","initCanvas","wheelDraw","canvas","document","getElementById","console","log","navigator","userAgent","indexOf","createElement","setAttribute","appendChild","addEventListener","spin","getContext","Date","getTime","setInterval","onTimerTick","draw","duration","progress","finished","sin","clearInterval","clear","drawWheel","drawNeedle","drawSegment","key","lastAngle","angle","ctx","value","save","beginPath","moveTo","arc","lineTo","closePath","fillStyle","fill","stroke","translate","rotate","font","fillText","substr","restore","len","PI2","lineWidth","strokeStyle","textBaseline","textAlign","i","centerY","fileStyle","centerX","change","floor","clearRect","React","id","width","height","style","pointerEvents","App","Fragment","WheelComponent","winner","ReactDOM","render"],"mappings":"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","file":"static/js/main.eff1db42.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nconst WheelComponent = ({\n  segments,\n  segColors,\n  winningSegment,\n  onFinished,\n  primaryColor = 'black',\n  contrastColor = 'white',\n  buttonText = 'Spin',\n  isOnlyOnce = true,\n  size = 290,\n  upDuration = 100,\n  downDuration = 1000,\n  fontFamily = 'proxima-nova'\n}) => {\n  let currentSegment = ''\n  let isStarted = false\n  const [isFinished, setFinished] = useState(false)\n  let timerHandle = 0\n  const timerDelay = segments.length\n  let angleCurrent = 0\n  let angleDelta = 0\n  let canvasContext = null\n  let maxSpeed = Math.PI / `${segments.length}`\n  const upTime = segments.length * upDuration\n  const downTime = segments.length * downDuration\n  let spinStart = 0\n  let frames = 0\n  const centerX = 300\n  const centerY = 300\n  useEffect(() => {\n    wheelInit()\n    setTimeout(() => {\n      window.scrollTo(0, 1)\n    }, 0)\n  }, [])\n  const wheelInit = () => {\n    initCanvas()\n    wheelDraw()\n  }\n\n  const initCanvas = () => {\n    let canvas = document.getElementById('canvas')\n    console.log(navigator)\n    if (navigator.userAgent.indexOf('MSIE') !== -1) {\n      canvas = document.createElement('canvas')\n      canvas.setAttribute('width', 1000)\n      canvas.setAttribute('height', 600)\n      canvas.setAttribute('id', 'canvas')\n      document.getElementById('wheel').appendChild(canvas)\n    }\n    canvas.addEventListener('click', spin, false)\n    canvasContext = canvas.getContext('2d')\n  }\n  const spin = () => {\n    isStarted = true\n    if (timerHandle === 0) {\n      spinStart = new Date().getTime()\n      // maxSpeed = Math.PI / ((segments.length*2) + Math.random())\n      maxSpeed = Math.PI / segments.length\n      frames = 0\n      timerHandle = setInterval(onTimerTick, timerDelay)\n    }\n  }\n  const onTimerTick = () => {\n    frames++\n    draw()\n    const duration = new Date().getTime() - spinStart\n    let progress = 0\n    let finished = false\n    if (duration < upTime) {\n      progress = duration / upTime\n      angleDelta = maxSpeed * Math.sin((progress * Math.PI) / 2)\n    } else {\n      if (winningSegment) {\n        if (currentSegment === winningSegment && frames > segments.length) {\n          progress = duration / upTime\n          angleDelta =\n            maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2)\n          progress = 1\n        } else {\n          progress = duration / downTime\n          angleDelta =\n            maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2)\n        }\n      } else {\n        progress = duration / downTime\n        angleDelta = maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2)\n      }\n      if (progress >= 1) finished = true\n    }\n\n    angleCurrent += angleDelta\n    while (angleCurrent >= Math.PI * 2) angleCurrent -= Math.PI * 2\n    if (finished) {\n      setFinished(true)\n      onFinished(currentSegment)\n      clearInterval(timerHandle)\n      timerHandle = 0\n      angleDelta = 0\n    }\n  }\n\n  const wheelDraw = () => {\n    clear()\n    drawWheel()\n    drawNeedle()\n  }\n\n  const draw = () => {\n    clear()\n    drawWheel()\n    drawNeedle()\n  }\n\n  const drawSegment = (key, lastAngle, angle) => {\n    const ctx = canvasContext\n    const value = segments[key]\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(centerX, centerY)\n    ctx.arc(centerX, centerY, size, lastAngle, angle, false)\n    ctx.lineTo(centerX, centerY)\n    ctx.closePath()\n    ctx.fillStyle = segColors[key]\n    ctx.fill()\n    ctx.stroke()\n    ctx.save()\n    ctx.translate(centerX, centerY)\n    ctx.rotate((lastAngle + angle) / 2)\n    ctx.fillStyle = contrastColor\n    ctx.font = 'bold 1em ' + fontFamily\n    ctx.fillText(value.substr(0, 21), size / 2 + 20, 0)\n    ctx.restore()\n  }\n\n  const drawWheel = () => {\n    const ctx = canvasContext\n    let lastAngle = angleCurrent\n    const len = segments.length\n    const PI2 = Math.PI * 2\n    ctx.lineWidth = 1\n    ctx.strokeStyle = primaryColor\n    ctx.textBaseline = 'middle'\n    ctx.textAlign = 'center'\n    ctx.font = '1em ' + fontFamily\n    for (let i = 1; i <= len; i++) {\n      const angle = PI2 * (i / len) + angleCurrent\n      drawSegment(i - 1, lastAngle, angle)\n      lastAngle = angle\n    }\n\n    // Draw a center circle\n    ctx.beginPath()\n    ctx.arc(centerX, centerY, 50, 0, PI2, false)\n    ctx.closePath()\n    ctx.fillStyle = primaryColor\n    ctx.lineWidth = 10\n    ctx.strokeStyle = contrastColor\n    ctx.fill()\n    ctx.font = 'bold 1em ' + fontFamily\n    ctx.fillStyle = contrastColor\n    ctx.textAlign = 'center'\n    ctx.fillText(buttonText, centerX, centerY + 3)\n    ctx.stroke()\n\n    // Draw outer circle\n    ctx.beginPath()\n    ctx.arc(centerX, centerY, size, 0, PI2, false)\n    ctx.closePath()\n\n    ctx.lineWidth = 10\n    ctx.strokeStyle = primaryColor\n    ctx.stroke()\n  }\n\n  const drawNeedle = () => {\n    const ctx = canvasContext\n    ctx.lineWidth = 1\n    ctx.strokeStyle = contrastColor\n    ctx.fileStyle = contrastColor\n    ctx.beginPath()\n    ctx.moveTo(centerX + 20, centerY - 50)\n    ctx.lineTo(centerX - 20, centerY - 50)\n    ctx.lineTo(centerX, centerY - 70)\n    ctx.closePath()\n    ctx.fill()\n    const change = angleCurrent + Math.PI / 2\n    let i =\n      segments.length -\n      Math.floor((change / (Math.PI * 2)) * segments.length) -\n      1\n    if (i < 0) i = i + segments.length\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.fillStyle = primaryColor\n    ctx.font = 'bold 1.5em ' + fontFamily\n    currentSegment = segments[i]\n    isStarted && ctx.fillText(currentSegment, centerX + 10, centerY + size + 50)\n  }\n  const clear = () => {\n    const ctx = canvasContext\n    ctx.clearRect(0, 0, 1000, 800)\n  }\n  return (\n    <div id='wheel'>\n      <canvas\n        id='canvas'\n        width='1000'\n        height='800'\n        style={{\n          pointerEvents: isFinished && isOnlyOnce ? 'none' : 'auto'\n        }}\n      />\n    </div>\n  )\n}\nexport default WheelComponent\n","import React from 'react'\n\nimport WheelComponent from 'react-wheel-of-prizes'\nimport './index.css'\n\nconst App = () => {\n  const segments = [\n    'better luck next time',\n    'won 70',\n    'won 10',\n    'better luck next time',\n    'won 2',\n    'won uber pass',\n    'better luck next time',\n    'won a voucher',\n    'won 70',\n    'won 10',\n    'better luck next time',\n    'won 2',\n    'won uber pass',\n    'better luck next time',\n    'won a voucher'\n  ]\n  const segColors = [\n    '#EE4040',\n    '#F0CF50',\n    '#815CD1',\n    '#3DA5E0',\n    '#34A24F',\n    '#F9AA1F',\n    '#EC3F3F',\n    '#FF9000',\n    '#F0CF50',\n    '#815CD1',\n    '#3DA5E0',\n    '#34A24F',\n    '#F9AA1F',\n    '#EC3F3F',\n    '#FF9000'\n  ]\n  const onFinished = (winner) => {\n    console.log(winner)\n  }\n  return (\n    <React.Fragment>\n      <WheelComponent\n        segments={segments}\n        segColors={segColors}\n        winningSegment={segments[3]}\n        onFinished={(winner) => onFinished(winner)}\n        primaryColor='black'\n        contrastColor='white'\n        buttonText='Spin'\n        isOnlyOnce={true}\n        size={290}\n        upDuration={100}\n        downDuration={1000}\n      />\n    </React.Fragment>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}